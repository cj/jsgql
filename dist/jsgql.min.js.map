{"version":3,"file":"jsgql.min.js","sources":["../src/jsgql.js"],"sourcesContent":["import gql from 'graphql-tag'\n\nexport { gql }\n\nexport const errorMsg = {\n  noFields: 'At least one field is required.',\n}\n\nexport default ({ type, name, variables, method, fields, types, methodArgs }) => {\n  let gqlStr = `${type} ${name}`\n\n  const processedFields = fields ? `{\n    ${processFields(fields)}\n  }` : ''\n\n  gqlStr = `${gqlStr}${processName(variables, types)} {\n    ${method}${processMethod(variables, methodArgs)} ${processedFields}\n  }`\n\n  return gql(gqlStr)\n}\n\nconst RESERVED_VALUE_KEYS = ['__variable__', '__type__']\n\nexport const valueReserved = value => {\n  return Object.keys(value).some(key => RESERVED_VALUE_KEYS.includes(key))\n}\n\nexport const processValue = value => {\n  if (value.__variable__) return `$${value.__variable__}`\n  else if (value.__type__) return value.__type__\n  else return processType(value) === 'String' ? `\"${value}\"` : value\n}\n\nexport const processType = obj => {\n  let type = {}.toString.call(obj).split(' ')[1].slice(0, -1)\n\n  return type === 'Number' ? 'Int' : type\n}\n\nexport const processName = (variables, types = {}) => {\n  if (!variables) return ''\n  let variablesList = []\n\n  for (let name in variables) {\n    let value = variables[name]\n    let type = types[name] || processType(value)\n\n    if (name.includes('id') || name.includes('Id')) type = 'ID'\n\n    variablesList.push(`$${name}: ${type}!`)\n  }\n\n  return `(${variablesList.join(', ')})`\n}\n\nexport const processMethod = (variables, methodArgs) => {\n  if (!variables) return methodArgs ? `(${processMethodArgs(methodArgs)})` : ''\n\n  let variablesList = []\n\n  for (let name in variables) {\n    variablesList.push(`${name}: $${name}`)\n  }\n\n  let methodString = `(${variablesList.join(', ')}`\n\n  if (methodArgs) methodString += `, ${processMethodArgs(methodArgs)}`\n\n  methodString += ')'\n\n  return methodString\n}\n\nexport const processMethodArgs = args => {\n  if (!args) return ''\n\n  let argsList = []\n\n  for (let name in args) {\n    let value = args[name]\n\n    if (!Array.isArray(value) && typeof value === 'object' && !valueReserved(value)) {\n      argsList.push(`${name}: { ${processMethodArgs(value)} }`)\n    } else {\n      if (Array.isArray(value)) value = `[${value.map(v => processValue(v)).join(', ')}]`\n      else value = processValue(value)\n\n      argsList.push(`${name}: ${value}`)\n    }\n  }\n\n  return argsList.join(', ')\n}\n\nexport const processFields = (fields, root = true) => {\n  if (!fields) return ''\n\n  return fields.reduce((fieldsStr, field) => {\n    if (Array.isArray(field)) {\n      let [key, subFields] = field\n\n      fieldsStr += ` ${key} {\n        ${processFields(subFields, false)}\n      }`\n    } else {\n      fieldsStr += `${field}\\n`\n    }\n\n    return fieldsStr\n  }, '')\n}\n"],"names":["const","errorMsg","noFields","RESERVED_VALUE_KEYS","valueReserved","value","Object","keys","some","key","includes","processValue","__variable__","__type__","processType","obj","let","type","toString","call","split","slice","processName","variables","types","variablesList","name","push","join","processMethod","methodArgs","processMethodArgs","methodString","args","argsList","Array","isArray","map","v","processFields","fields","root","reduce","fieldsStr","field","subFields","ref","method","gqlStr","processedFields","gql"],"mappings":"6RAIOA,IAAMC,GACXC,SAAU,mCAiBNC,GAAuB,eAAgB,YAEhCC,EAAgB,SAAAC,GAC3B,OAAOC,OAAOC,KAAKF,GAAOG,KAAK,SAAAC,UAAON,EAAoBO,SAASD,MAGxDE,EAAe,SAAAN,GAC1B,OAAIA,EAAMO,aAAqB,IAAIP,EAAkB,aAC5CA,EAAMQ,SAAiBR,EAAMQ,SACH,WAAvBC,EAAYT,GAAsB,IAAIA,MAAWA,GAGlDS,EAAc,SAAAC,GACzBC,IAAIC,KAAUC,SAASC,KAAKJ,GAAKK,MAAM,KAAK,GAAGC,MAAM,GAAI,GAEzD,MAAgB,WAATJ,EAAoB,MAAQA,GAGxBK,EAAc,SAACC,EAAWC,GACrC,uBAAKD,EAAW,MAAO,GACvBP,IAAIS,KAEJ,IAAKT,IAAIU,KAAQH,EAAW,CAC1BP,IAAIX,EAAQkB,EAAUG,GAClBT,EAAOO,EAAME,IAASZ,EAAYT,IAElCqB,EAAKhB,SAAS,OAASgB,EAAKhB,SAAS,SAAOO,EAAO,MAEvDQ,EAAcE,KAAK,IAAID,OAAST,OAGlC,MAAO,IAAIQ,EAAcG,KAAK,WAGnBC,EAAgB,SAACN,EAAWO,GACvC,IAAKP,EAAW,OAAOO,EAAa,IAAIC,EAAkBD,OAAiB,GAE3Ed,IAAIS,KAEJ,IAAKT,IAAIU,KAAQH,EACfE,EAAcE,KAAKD,QAAaA,GAGlCV,IAAIgB,EAAe,IAAIP,EAAcG,KAAK,MAM1C,OAJIE,IAAYE,GAAgB,KAAKD,EAAkBD,IAEvDE,GAAgB,KAKLD,EAAoB,SAAAE,GAC/B,IAAKA,EAAM,MAAO,GAElBjB,IAAIkB,KAEJ,IAAKlB,IAAIU,KAAQO,EAAM,CACrBjB,IAAIX,EAAQ4B,EAAKP,GAEZS,MAAMC,QAAQ/B,IAA2B,iBAAVA,GAAuBD,EAAcC,IAG7CA,EAAtB8B,MAAMC,QAAQ/B,GAAgB,IAAIA,EAAMgC,IAAI,SAAAC,UAAK3B,EAAa2B,KAAIV,KAAK,UAC9DjB,EAAaN,GAE1B6B,EAASP,KAAKD,OAAYrB,IAL1B6B,EAASP,KAAKD,SAAcK,EAAkB1B,SASlD,OAAO6B,EAASN,KAAK,OAGVW,EAAgB,SAACC,EAAQC,GACpC,uBAD2C,GACtCD,EAEEA,EAAOE,OAAO,SAACC,EAAWC,GAC/B,GAAIT,MAAMC,QAAQQ,GAAQ,CACxB,IAAKnC,OAAKoC,OAEVF,GAAa,IAAIlC,iBACb8B,EAAcM,GAAW,oBAG7BF,GAAaC,OAGf,OAAOD,GACN,IAdiB,mCAxFP,SAACG,OAAE7B,SAAMS,SAAMH,cAAWwB,WAAQP,WAAQhB,UAAOM,eAC1DkB,EAAS/B,MAAWS,EAElBuB,EAAkBT,EAAS,UAC7BD,EAAcC,WACb,GAML,OAJAQ,EAAS,GAAGA,EAAS1B,EAAYC,EAAWC,cACxCuB,EAASlB,EAAcN,EAAWO,OAAemB,UAG9CC,EAAIF"}