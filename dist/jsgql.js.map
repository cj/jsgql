{"version":3,"file":"jsgql.js","sources":["../src/jsgql.js"],"sourcesContent":["import gql from 'graphql-tag'\n\nexport { gql }\n\nexport default ({ type, name, variables, method, fields, types, methodArgs }) => {\n  let gqlStr = `${type} ${name}`\n\n  gqlStr = `${gqlStr}${processName(variables, types)} {\n    ${method}${processMethod(variables, methodArgs)} {\n      ${processFields(fields)}\n    }\n  }`\n\n  return gql(gqlStr)\n}\n\nconst RESERVED_VALUE_KEYS = ['__variable__', '__type__']\n\nexport const valueReserved = value => {\n  return Object.keys(value).some(key => RESERVED_VALUE_KEYS.includes(key))\n}\n\nexport const processValue = value => {\n  if (value.__variable__) return `$${value.__variable__}`\n  else if (value.__type__) return value.__type__\n  else return processType(value) === 'String' ? `\"${value}\"` : value\n}\n\nexport const processType = obj => {\n  let type = {}.toString.call(obj).split(' ')[1].slice(0, -1)\n\n  return type === 'Number' ? 'Int' : type\n}\n\nexport const processName = (variables, types = {}) => {\n  if (!variables) return ''\n  let variablesList = []\n\n  for (let name in variables) {\n    let value = variables[name]\n    let type = types[name] || processType(value)\n\n    if (name.includes('id') || name.includes('Id')) type = 'ID'\n\n    variablesList.push(`$${name}: ${type}!`)\n  }\n\n  return `(${variablesList.join(', ')})`\n}\n\nexport const processMethod = (variables, methodArgs) => {\n  if (!variables) return methodArgs ? `(${processMethodArgs(methodArgs)})` : ''\n\n  let variablesList = []\n\n  for (let name in variables) {\n    variablesList.push(`${name}: $${name}`)\n  }\n\n  let methodString = `(${variablesList.join(', ')}`\n\n  if (methodArgs) methodString += `, ${processMethodArgs(methodArgs)}`\n\n  methodString += ')'\n\n  return methodString\n}\n\nexport const processMethodArgs = args => {\n  if (!args) return ''\n\n  let argsList = []\n\n  for (let name in args) {\n    let value = args[name]\n\n    if (!Array.isArray(value) && typeof value === 'object' && !valueReserved(value)) {\n      argsList.push(`${name}: { ${processMethodArgs(value)} }`)\n    } else {\n      if (Array.isArray(value)) value = `[${value.map(v => processValue(v)).join(', ')}]`\n      else value = processValue(value)\n\n      argsList.push(`${name}: ${value}`)\n    }\n  }\n\n  return argsList.join(', ')\n}\n\nexport const processFields = fields => {\n  if (!fields) return null\n\n  return fields.reduce((fieldsStr, field) => {\n    if (Array.isArray(field)) {\n      let [key, subFields] = field\n\n      fieldsStr += ` ${key} {\n        ${processFields(subFields)}\n      }`\n    } else {\n      fieldsStr += `${field}\\n`\n    }\n\n    return fieldsStr\n  }, '')\n}\n"],"names":["let","const"],"mappings":"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"}